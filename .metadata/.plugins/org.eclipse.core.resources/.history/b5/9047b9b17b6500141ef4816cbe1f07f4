 import java.io.IOException;
import java.util.*;

    import org.apache.hadoop.fs.Path;
import org.apache.hadoop.conf.*;
import org.apache.hadoop.io.*;
import org.apache.hadoop.mapreduce.*;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;

    public class Main {
    	//Array that stores the centeroids. Initailly assigned random values
    	static int centers[]={1,2,3,4,5};
     public static class Map extends Mapper<LongWritable, Text, Text, IntWritable> {
       
        private Text center = new Text();

        public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
            String line = value.toString();
            StringTokenizer tokenizer = new StringTokenizer(line);
            while (tokenizer.hasMoreTokens()) {
            	
            	int val=Integer.parseInt((tokenizer.nextToken()));
        		int closest=centers[0];		//initializing value to first cluster
        		
        		//Finding cluster closest to value
        		for(int i=1;i<centers.length;i++){
        			if(Math.abs(centers[i]-val)<Math.abs(closest-val)){
        				closest=centers[i];
        			}
        			
                center.set(closest+"");
                IntWritable valEmit = new IntWritable(val);
                context.write(center, valEmit);
                
            }
        }
     } 

     public static class Reduce extends Reducer<Text, IntWritable, Text, IntWritable> {

        public void reduce(Text key, Iterable<IntWritable> values, Context context) 
          throws IOException, InterruptedException {
            int sum = 0;
            int count=0;
            //Calculating new center values for cluster
            for (IntWritable val : values) {
                sum += val.get();
                count++;
            }
            int newCenter=sum/count;
            int oldKey=Integer.parseInt(key.toString());
            
            //Updating center values to newly calculated ones
            for(int i=0;i<centers.length;i++){
            	if(centers[i]==oldKey){
            		centers[i]=newCenter;
            		break;
            	}
            }
            Text keyEmit=new Text();
            keyEmit.set(newCenter+"");
            context.write(keyEmit, new IntWritable(sum));
        }
     }

     public static void main(String[] args) throws Exception {
    	 int oldCenters[]=new int[centers.length];
    	 int newCenters[]=new int[centers.length];
    	 
    	while(Arrays.toString(oldCenters)!=Arrays.toString(newCenters)) { 
    		 oldCenters=centers;
    		 Configuration conf = new Configuration();

            Job job = new Job(conf, "kmeans");

        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(IntWritable.class);

        job.setMapperClass(Map.class);
        job.setReducerClass(Reduce.class);

        job.setInputFormatClass(TextInputFormat.class);
        job.setOutputFormatClass(TextOutputFormat.class);

        FileInputFormat.addInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));

        job.waitForCompletion(true);
        newCenters=centers;
     }}

    }
     }